{"version":3,"sources":["components/filter.js","components/uploadPost.js","components/commentReply.js","components/queries.js","components/displayChildComment.js","components/displayComment.js","components/displayPost.js","components/notification.js","components/home.js","components/login.js","components/register.js","components/user.js","components/postChildComment.js","components/postComment.js","components/post.js","components/friends.js","components/userinfo.js","index.js"],"names":["DEFAULT_OPTIONS","name","property","value","range","min","max","unit","Filter","file","setNewFile","setFilterRem","useState","options","setOptions","selectedOptionIndex","setSelectedOptionIndex","selectedOption","getImageStyle","filter","map","option","join","style_hidden","display","useEffect","newSrc","setNewSrc","setFilter","originalImage","document","getElementById","filteredImageCanvas","id","src","URL","createObjectURL","alt","style","onLoad","LenaJS","toDataURL","type","toBlob","blob","new_file","File","split","pop","width","className","index","onClick","onChange","event","preOptions","target","S3_PRE_SIGN","gql","Upload","handleClose","show","userID","addPost","setError","setSuccess","useMutation","s3PreSign","result_url","setFile","newFile","title","setTitle","filterRem","handleSubmit","a","preventDefault","key","variables","data","url","uploadFile","axios","put","headers","then","result","user","setTimeout","message","AddPostFunction","catch","error","Modal","onHide","onSubmit","Header","closeButton","Title","Body","files","required","placeholder","Footer","Button","variant","Reply","addChildComment","comment_id","reply_user","content","childComment","parentComment","replyTo","ALL_POSTS","ADD_POST","ADD_POST_LIKES","REMOVE_POST_LIKES","ADD_COMMENT","ADD_COMMENT_LIKES","REMOVE_COMMENT_LIKES","ADD_CHILD_COMMENT","ADD_CHILD_COMMENT_LIKES","REMOVE_CHILD_COMMENT_LIKES","FIND_USER","ADD_FRIEND","REMOVE_FRIEND","DisplayChildComment","comment","postsAll","setPostsAll","childCommentVisible","handleReplyShow","styleHeartRed","styleHeartBlack","addChildCommentLikes","result_addChildCommentLikes","removeChildCommentLikes","result_removeChildCommentLikes","postUpdated","find","post","comments","childComments","child","likes","marginLeft","to","avatar","height","username","Date","parseInt","updated","toLocaleString","childComment_find","concat","handleChildCommentLikes","length","DisplayComment","setReplyShow","setCommentID","setReplyUser","setChildCommentVisible","removeCommentLikes","addCommentLikes","addComment","commentVisible","user_id","handleAddComment","postID","post_id","hideWhenVisible","showWhenVisible","newChildCommentVisible","handleChildCommentShow","comment_find","handleCommentLikes","DisplayPost","handleUploadClose","uploadShow","handleReplyClose","replyShow","success","userAll","setUserAll","setCommentVisible","allPostsRender","setAllPostsRender","posts","useQuery","useLazyQuery","result_user","result_post","addPostLikes","result_addPostLikes","removePostLikes","result_removePostLikes","result_comment","result_addCommentLikes","result_removeCommentLikes","result_childComment","addFriend","result_addFriend","removeFriend","result_removeFriend","handleFollow","friend_id","friend_find","friends","friendid","friend","border","outline","backgroundColor","styleFollow","color","borderRadius","justifyContent","alignContent","position","left","bottom","styleFollowDisappear","findUser","allPosts","reduce","accumulator","currentValue","newCommentVisible","loading","controls","post_find","handlePostLikes","handleDisplayComment","Notification","Home","token","setToken","setUploadShow","client","useApolloClient","styleBorder","localStorage","clear","resetStore","LOGIN","Login","setUsername","setUserID","login","result_login","passwordHash","pwd","setItem","CREATE_USER","Register","history","useHistory","createUser","setPasswordHash","console","log","CreateUserFunction","push","User","ID","useParams","dispatch","useDispatch","userInfo","setUserInfo","PostChildComment","postInfo","setPostInfo","newPost","PostComment","postShow","FIND_POST","Post","findPost","result_addChildComment","setPostShow","postRender","setPostRender","POST_MESSAGE","POST_MESSAGE_SUB","Friends","useSelector","state","channelSent","SetChannelSent","channelReceived","setChannelReceived","chatHistory","setChatHistory","postMessage","useSubscription","channel_name","onSubscriptionData","subscriptionData","chat","created_at","friendname","chatMes","userReducer","action","reducer","combineReducers","store","createStore","authLink","setContext","_","getItem","authorization","httpLink","HttpLink","uri","wsLink","WebSocketLink","reconnect","splitLink","query","definition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","typePolicies","fields","merge","existing","incoming","Comment","ChildComment","link","App","exact","path","ReactDOM","render"],"mappings":"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","file":"static/js/main.af4a00c8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport * as LenaJS from \"lena.js\"\r\n\r\n\r\n\r\nconst DEFAULT_OPTIONS = [\r\n    {\r\n        name: \"Brightness\",\r\n        property: \"brightness\",\r\n        value: 100,\r\n        range: {\r\n            min: 0,\r\n            max: 200\r\n        },\r\n        unit: \"%\"\r\n    },\r\n    {\r\n        name: \"Contrast\",\r\n        property: \"contrast\",\r\n        value: 100,\r\n        range: {\r\n            min: 0,\r\n            max: 200\r\n        },\r\n        unit: \"%\"\r\n    },\r\n    {\r\n        name: \"Saturation\",\r\n        property: \"saturate\",\r\n        value: 100,\r\n        range: {\r\n            min: 0,\r\n            max: 200\r\n        },\r\n        unit: \"%\"\r\n    },\r\n    {\r\n        name: \"Grayscale\",\r\n        property: \"grayscale\",\r\n        value: 0,\r\n        range: {\r\n            min: 0,\r\n            max: 100\r\n        },\r\n        unit: \"%\"\r\n    },\r\n    {\r\n        name: \"Sepia\",\r\n        property: \"sepia\",\r\n        value: 0,\r\n        range: {\r\n            min: 0,\r\n            max: 100\r\n        },\r\n        unit: \"%\"\r\n    },\r\n    {\r\n        name: \"Hue Rotate\",\r\n        property: \"hue-rotate\",\r\n        value: 0,\r\n        range: {\r\n            min: 0,\r\n            max: 360\r\n        },\r\n        unit: \"deg\"\r\n    },\r\n    {\r\n        name: \"Blur\",\r\n        property: \"blur\",\r\n        value: 0,\r\n        range: {\r\n            min: 0,\r\n            max: 20\r\n        },\r\n        unit: \"px\"\r\n    }\r\n]\r\n\r\n\r\n\r\nconst Filter = ({ file, setNewFile, setFilterRem }) => {\r\n    // CSS FILTER\r\n    const [ options, setOptions ] = useState(DEFAULT_OPTIONS)\r\n    const [ selectedOptionIndex, setSelectedOptionIndex ] = useState(0)\r\n    const selectedOption = options[selectedOptionIndex]\r\n\r\n    const handleSliderChange = (event) => {\r\n        setOptions(preOptions => {\r\n            return preOptions.map((option, index) => {\r\n                if (index !== selectedOptionIndex) return option\r\n                return { ...option, value: event.target.value }\r\n            })\r\n        })\r\n    }\r\n\r\n    const getImageStyle = () => {\r\n        const filters = options.map(option => {\r\n            return `${option.property}(${option.value}${option.unit})`\r\n        })\r\n        \r\n        return { filter: filters.join(' ') }\r\n    }\r\n\r\n    const style_hidden = {\r\n        display: 'none'\r\n    }\r\n\r\n    useEffect(() => {\r\n        setFilterRem(getImageStyle().filter)\r\n    }, [selectedOption])\r\n\r\n\r\n    // ADVANCED FITLER \r\n    // img tag async, and canvas tag sync\r\n    // Upload Image\r\n    const [ newSrc, setNewSrc ] = useState(null)\r\n    const [ filter, setFilter ] = useState(null)\r\n    const originalImage = document.getElementById(\"original-image\")\r\n    const filteredImageCanvas = document.getElementById(\"filtered-canvas\")\r\n    \r\n    const handleOnLoad = () => {\r\n        if (filter) {\r\n            LenaJS.filterImage(filteredImageCanvas, filter, originalImage)\r\n            setNewSrc(filteredImageCanvas.toDataURL(file.type))\r\n\r\n            filteredImageCanvas.toBlob(function(blob) {\r\n                const new_file = new File([blob], file.name, {\r\n                    type: \"image/jpeg\"\r\n                })\r\n                setNewFile(new_file)\r\n            }, \"image/jpeg\", 0.5)\r\n        }\r\n    }\r\n\r\n    // Add or Change Filter(filter or none)\r\n    const handleAdvancedFilter = (event) => { \r\n        if (event.target.value !== \"none\") {\r\n            setFilter(() => LenaJS[event.target.value])\r\n        } else {\r\n            setNewSrc(null)\r\n            setFilter(null)\r\n            setNewFile(null)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <img \r\n                id=\"original-image\"\r\n                src={file? URL.createObjectURL(file) : null} \r\n                alt={file? file.name : null}\r\n                style={style_hidden}\r\n                onLoad={handleOnLoad}\r\n            />\r\n\r\n            {file === null\r\n                ? null\r\n                : file.name.split(\".\").pop() === \"mp4\"\r\n                    ? null\r\n                    :  <img\r\n                        id=\"filtered-image\"\r\n                        width=\"100%\" \r\n                        src={newSrc ? newSrc : (file ? URL.createObjectURL(file) : null)}\r\n                        alt={file? file.name : null}\r\n                        style={getImageStyle()}\r\n                    />\r\n            }\r\n\r\n            <canvas \r\n                id=\"filtered-canvas\" \r\n                style={style_hidden}\r\n            />\r\n            \r\n            <br /><br /><br />\r\n            {file === null\r\n                ? null\r\n                : file.name.split(\".\").pop() === \"mp4\"\r\n                    ? null\r\n                    : <div>\r\n                        <div className='button-filter'>\r\n                            {options.map((option, index) => {\r\n                                return(\r\n                                    <button key={index} type='button' className='btn btn-warning' onClick={() => setSelectedOptionIndex(index)}>\r\n                                        {option.name}\r\n                                    </button>\r\n                                )\r\n                            })}\r\n                        </div>\r\n\r\n                        <input \r\n                            type='range' \r\n                            min={selectedOption.range.min}\r\n                            max={selectedOption.range.max}\r\n                            value={selectedOption.value}\r\n                            onChange={handleSliderChange}\r\n                        />\r\n\r\n                        <br /><br /><br />\r\n\r\n                        <h3>More advanced filter options...</h3>\r\n                        <select id=\"filter-changer\" onChange={handleAdvancedFilter}>\r\n                            <option value=\"none\">None</option>\r\n                            <option value=\"red\">Red</option>\r\n                            <option value=\"gaussian\">Gaussian</option>\r\n                            <option value=\"highpass\">highpass</option>\r\n                            <option value=\"invert\">invert</option>\r\n                            <option value=\"laplacian\">laplacian</option>\r\n                            <option value=\"prewittHorizontal\">Prewitt Horizontal</option>\r\n                            <option value=\"prewittVertical\">Prewitt Vertical</option>\r\n                            <option value=\"roberts\">roberts</option>\r\n                            <option value=\"sharpen\">sharpen</option>\r\n                            <option value=\"sobelHorizontal\">sobel Horizontal</option>\r\n                            <option value=\"sobelVertical\">sobel Vertical</option>\r\n                            <option value=\"thresholding\">thresholding</option>\r\n                        </select>\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Filter","import React, { useEffect, useState } from 'react'\r\nimport { Button, Modal } from 'react-bootstrap'\r\nimport { gql, useMutation } from '@apollo/client'\r\nimport axios from 'axios'\r\nimport Filter from './filter'\r\n\r\n\r\n\r\nconst S3_PRE_SIGN = gql`\r\nmutation s3PreSign($key: String!, $type: String!) {\r\n    s3PreSign(\r\n        key: $key\r\n        type: $type\r\n    ) {\r\n        url\r\n    }\r\n}`\r\n\r\n\r\n\r\nconst Upload = ({ \r\n    handleClose, \r\n    show, \r\n    userID, \r\n    addPost,\r\n    setError,\r\n    setSuccess,\r\n }) => {\r\n    const [ s3PreSign, result_url ] = useMutation(S3_PRE_SIGN)\r\n\r\n    const [ file, setFile ] = useState(null)\r\n    const [ newFile, setNewFile ] = useState(null)\r\n    const [ title, setTitle ] = useState(null)\r\n    const [ filterRem, setFilterRem ] = useState(\"brightness(100%) contrast(100%) saturate(100%) grayscale(0%) sepia(0%) hue-rotate(0deg) blur(0px)\")\r\n\r\n    const handleImagePreview = (event) => {\r\n        setFile(event.target.files[0])\r\n        setNewFile(null)\r\n    }\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const key = file.name\r\n        const type = file.type\r\n\r\n        setTitle(event.target.title.value)\r\n\r\n        s3PreSign({ variables: { key, type } })\r\n\r\n        event.target.title.value = ''\r\n    }\r\n \r\n    useEffect(() => {\r\n        if (result_url.data && file) {\r\n            const url = result_url.data.s3PreSign.url\r\n            const uploadFile = newFile ? newFile : file\r\n\r\n            axios\r\n                .put(url, uploadFile, {headers: {\r\n                    \"Content-Type\": uploadFile.type\r\n                }\r\n            })\r\n                .then(result => {\r\n                    const url = `https://daisy-ins.s3.amazonaws.com/${uploadFile.name}`\r\n                    const user = userID\r\n                    const filter = filterRem\r\n\r\n                    async function AddPostFunction() {\r\n                        try {\r\n                            await addPost({ variables: { url, title, user, filter } })\r\n                            setSuccess(\"Add Post Successfully!\")\r\n                            setTimeout(() => setSuccess(null), 3000)\r\n                        } catch(error) {\r\n                            setError(error.message)\r\n                            setTimeout(() => setError(null), 3000)\r\n                        }   \r\n                    }\r\n                    AddPostFunction()\r\n\r\n                    setFile(null)\r\n                    setNewFile(null)\r\n                })\r\n                .catch(error => {\r\n                    setError(error)\r\n                    setTimeout(() => setError(null), 3000)\r\n                })\r\n        }\r\n    }, [result_url.data])\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <form onSubmit={handleSubmit}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Add Post</Modal.Title>\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <input \r\n                            type='file' \r\n                            name='image'\r\n                            id=\"imageLoader\"\r\n                            onChange={handleImagePreview} \r\n                            required\r\n                        />\r\n                        \r\n                        <br /><br /><br />\r\n\r\n                        <Filter \r\n                            file={file} \r\n                            setNewFile={setNewFile} \r\n                            setFilterRem={setFilterRem}\r\n                            newFile={newFile}\r\n                        />\r\n                        \r\n                        <textarea \r\n                            type='text' \r\n                            name='title' \r\n                            placeholder='Your comment within 100 letters...'\r\n                            required\r\n                        ></textarea>\r\n                    </Modal.Body>\r\n                    \r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>\r\n                            Close\r\n                        </Button>\r\n                        <Button className='btn btn-primary' type='submit' variant=\"primary\" onClick={handleClose}>\r\n                            Save Changes\r\n                        </Button>\r\n                    </Modal.Footer>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Upload","import React from 'react'\r\nimport { Button, Modal } from 'react-bootstrap'\r\n\r\n\r\n\r\nconst Reply = ({ \r\n    show, \r\n    handleClose, \r\n    userID, \r\n    addChildComment, \r\n    comment_id, \r\n    reply_user,\r\n    setError,\r\n    setSuccess\r\n}) => {\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const content = event.target.childComment.value\r\n        const user = userID\r\n        const parentComment = comment_id\r\n        const replyTo = reply_user\r\n\r\n        try {\r\n            await addChildComment({ variables: { content, user, parentComment, replyTo } })\r\n            setSuccess(\"Comment Added!\")\r\n            setTimeout(() => setSuccess(null), 3000)\r\n        } catch(error) {\r\n            setError(error.message)\r\n            setTimeout(() => setError(null), 3000)\r\n        }\r\n        \r\n        event.target.childComment.value = ''\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Modal show={show} onHide={handleClose}>\r\n                <form  onSubmit={handleSubmit}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>Reply Here</Modal.Title>\r\n                    </Modal.Header>\r\n\r\n                    <Modal.Body>\r\n                        <textarea type='text' name='childComment' placeholder='Your comment within 50 letters...'></textarea>\r\n                    </Modal.Body>\r\n                    \r\n                    <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\r\n                        <Button type='submit' variant=\"primary\" onClick={handleClose}>Save Changes</Button>\r\n                    </Modal.Footer>\r\n                </form>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Reply","import { gql  } from '@apollo/client'\r\n\r\n\r\n\r\nexport const ALL_POSTS = gql`\r\nquery {\r\n    allPosts {\r\n        url\r\n        filter\r\n        title\r\n        updated\r\n        likes {\r\n            id\r\n        }\r\n        id\r\n        user {\r\n            username\r\n            avatar\r\n            friends {\r\n                id\r\n            }\r\n            id\r\n        }\r\n        comments {\r\n            content\r\n            updated\r\n            likes {\r\n                id\r\n            }\r\n            user {\r\n                username\r\n                avatar\r\n                id\r\n            }\r\n            post {\r\n                id\r\n            }\r\n            childComments {\r\n                content\r\n                updated\r\n                likes {\r\n                  id\r\n                }\r\n                user {\r\n                    username\r\n                    avatar\r\n                    id\r\n                }\r\n                replyTo {\r\n                    username\r\n                }\r\n                parentComment {\r\n                  id\r\n                }\r\n                id\r\n            }\r\n            id\r\n        }\r\n    }\r\n}`\r\n\r\nexport const ADD_POST = gql`\r\nmutation addPost($url: String!, $filter: String!, $title: String!, $user: ID!) {\r\n    addPost(\r\n        url: $url\r\n        filter: $filter\r\n        title: $title\r\n        user: $user\r\n    ) {\r\n        url\r\n        filter\r\n        title\r\n        updated\r\n        likes {\r\n            id\r\n        }\r\n        id\r\n        user {\r\n            username\r\n            avatar\r\n            friends {\r\n                id\r\n            }\r\n            id\r\n        }\r\n        comments {\r\n            content\r\n            updated\r\n            likes {\r\n                id\r\n            }\r\n            user {\r\n                username\r\n                avatar\r\n                id\r\n            }\r\n            post {\r\n                id\r\n            }\r\n            childComments {\r\n                content\r\n                updated\r\n                likes {\r\n                  id\r\n                }\r\n                user {\r\n                    username\r\n                    avatar\r\n                }\r\n                replyTo {\r\n                    username\r\n                }\r\n                parentComment {\r\n                  id\r\n                }\r\n                id\r\n            }\r\n            id\r\n        }\r\n    }\r\n}`\r\n\r\nexport const ADD_POST_LIKES = gql`\r\nmutation addPostLikes($id: ID!, $likes: [ID]!) {\r\n    addPostLikes(\r\n        id: $id\r\n        likes: $likes\r\n    ) {\r\n        url\r\n        filter\r\n        title\r\n        updated\r\n        likes {\r\n            id\r\n        }\r\n        id\r\n        user {\r\n            username\r\n            avatar\r\n            friends {\r\n                id\r\n            }\r\n            id\r\n        }\r\n        comments {\r\n            content\r\n            updated\r\n            likes {\r\n                id\r\n            }\r\n            user {\r\n                username\r\n                avatar\r\n                id\r\n            }\r\n            post {\r\n                id\r\n            }\r\n            childComments {\r\n                content\r\n                updated\r\n                likes {\r\n                  id\r\n                }\r\n                user {\r\n                    username\r\n                    avatar\r\n                }\r\n                replyTo {\r\n                    username\r\n                }\r\n                parentComment {\r\n                  id\r\n                }\r\n                id\r\n            }\r\n            id\r\n        }\r\n    }\r\n}`\r\n\r\nexport const REMOVE_POST_LIKES = gql`\r\nmutation removePostLikes($id: ID!, $likes: [ID]!) {\r\n    removePostLikes(\r\n        id: $id\r\n        likes: $likes\r\n    ) {\r\n        url\r\n        filter\r\n        title\r\n        updated\r\n        likes {\r\n            id\r\n        }\r\n        id\r\n        user {\r\n            username\r\n            avatar\r\n            friends {\r\n                id\r\n            }\r\n            id\r\n        }\r\n        comments {\r\n            content\r\n            updated\r\n            likes {\r\n                id\r\n            }\r\n            user {\r\n                username\r\n                avatar\r\n                id\r\n            }\r\n            post {\r\n                id\r\n            }\r\n            childComments {\r\n                content\r\n                updated\r\n                likes {\r\n                  id\r\n                }\r\n                user {\r\n                    username\r\n                    avatar\r\n                }\r\n                replyTo {\r\n                    username\r\n                }\r\n                parentComment {\r\n                  id\r\n                }\r\n                id\r\n            }\r\n            id\r\n        }\r\n    }\r\n}`\r\n\r\nexport const ADD_COMMENT = gql`\r\nmutation addComment($content: String!, $user: ID!, $post: ID!) {\r\n    addComment(\r\n        content: $content\r\n        user: $user\r\n        post: $post\r\n    ) {\r\n        content\r\n        updated\r\n        likes {\r\n            id\r\n        }\r\n        user {\r\n            username\r\n            avatar\r\n            id\r\n        }\r\n        post {\r\n            id\r\n        }\r\n        childComments {\r\n            content\r\n            updated\r\n            likes {\r\n              id\r\n            }\r\n            user {\r\n                username\r\n                avatar\r\n                id\r\n            }\r\n            replyTo {\r\n                username\r\n            }\r\n            parentComment {\r\n              id\r\n            }\r\n            id\r\n        }\r\n        id\r\n    }\r\n}`\r\n\r\nexport const ADD_COMMENT_LIKES = gql`\r\nmutation addCommentLikes($id: ID!, $likes: [ID]!) {\r\n    addCommentLikes(\r\n        id: $id\r\n        likes: $likes\r\n    ) {\r\n        content\r\n        updated\r\n        likes {\r\n            id\r\n        }\r\n        user {\r\n            username\r\n            avatar\r\n            id\r\n        }\r\n        post {\r\n            id\r\n        }\r\n        childComments {\r\n            content\r\n            updated\r\n            likes {\r\n              id\r\n            }\r\n            user {\r\n                username\r\n                avatar\r\n                id\r\n            }\r\n            replyTo {\r\n                username\r\n            }\r\n            parentComment {\r\n              id\r\n            }\r\n            id\r\n        }\r\n        id\r\n    }\r\n}`\r\n\r\nexport const REMOVE_COMMENT_LIKES = gql`\r\nmutation removeCommentLikes($id: ID!, $likes: [ID]!) {\r\n    removeCommentLikes(\r\n        id: $id\r\n        likes: $likes\r\n    ) {\r\n        content\r\n        updated\r\n        likes {\r\n            id\r\n        }\r\n        user {\r\n            username\r\n            avatar\r\n            id\r\n        }\r\n        post {\r\n            id\r\n        }\r\n        childComments {\r\n            content\r\n            updated\r\n            likes {\r\n              id\r\n            }\r\n            user {\r\n                username\r\n                avatar\r\n                id\r\n            }\r\n            replyTo {\r\n                username\r\n            }\r\n            parentComment {\r\n              id\r\n            }\r\n            id\r\n        }\r\n        id\r\n    }\r\n}`\r\n\r\nexport const ADD_CHILD_COMMENT = gql`\r\nmutation addChildComment($content: String!, $user: ID!, $parentComment: ID!, $replyTo: ID!) {\r\n    addChildComment(\r\n        content: $content\r\n        user: $user\r\n        replyTo: $replyTo\r\n        parentComment: $parentComment\r\n    ) {\r\n        content\r\n        updated\r\n        likes {\r\n            id\r\n        }\r\n        user {\r\n            username\r\n            avatar\r\n            id\r\n        }\r\n        replyTo {\r\n            username\r\n        }\r\n        parentComment {\r\n            id\r\n        }\r\n        id\r\n    }\r\n}`\r\n\r\nexport const ADD_CHILD_COMMENT_LIKES = gql`\r\nmutation addChildCommentLikes($id: ID!, $likes: [ID]!) {\r\n    addChildCommentLikes(\r\n        id: $id\r\n        likes: $likes\r\n    ) {\r\n        content\r\n        updated\r\n        likes {\r\n            id\r\n        }\r\n        user {\r\n            username\r\n            avatar\r\n            id\r\n        }\r\n        replyTo {\r\n            username\r\n        }\r\n        parentComment {\r\n            id\r\n        }\r\n        id\r\n    }\r\n}`\r\n\r\nexport const REMOVE_CHILD_COMMENT_LIKES = gql`\r\nmutation removeChildCommentLikes($id: ID!, $likes: [ID]!) {\r\n    removeChildCommentLikes(\r\n        id: $id\r\n        likes: $likes\r\n    ) {\r\n        content\r\n        updated\r\n        likes {\r\n            id\r\n        }\r\n        user {\r\n            username\r\n            avatar\r\n            id\r\n        }\r\n        replyTo {\r\n            username\r\n        }\r\n        parentComment {\r\n            id\r\n        }\r\n        id\r\n    }\r\n}`\r\n\r\nexport const FIND_USER = gql`\r\nquery findUser($id: ID!) {\r\n    findUser(id: $id) {\r\n        username\r\n        avatar\r\n        friends {\r\n            id\r\n        }\r\n        posts {\r\n            id\r\n        }\r\n        id\r\n    }\r\n}`\r\n\r\nexport const ADD_FRIEND = gql`\r\nmutation addFriend($id: ID!, $friends: [ID]!) {\r\n    addFriend(\r\n        id: $id\r\n        friends: $friends\r\n    ) {\r\n        username\r\n        avatar\r\n        friends {\r\n            id\r\n        }\r\n        posts {\r\n            id\r\n        }\r\n        id\r\n    }\r\n}`\r\n\r\nexport const REMOVE_FRIEND = gql`\r\nmutation removeFriend($id: ID!, $friends: [ID]!) {\r\n    removeFriend(\r\n        id: $id\r\n        friends: $friends\r\n    ) {\r\n        username\r\n        avatar\r\n        friends {\r\n            id\r\n        }\r\n        posts {\r\n            id\r\n        }\r\n        id\r\n    }\r\n}`","import React, { useEffect } from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { ADD_CHILD_COMMENT_LIKES, REMOVE_CHILD_COMMENT_LIKES } from './queries'\r\nimport { Link } from \"react-router-dom\"\r\n\r\n\r\n\r\nconst DisplayChildComment = ({ \r\n    comment, \r\n    userID,\r\n    postsAll,\r\n    setPostsAll,\r\n    childCommentVisible, \r\n    handleReplyShow,\r\n    style,\r\n    styleHeartRed,\r\n    styleHeartBlack\r\n}) => {\r\n    const [ addChildCommentLikes, result_addChildCommentLikes ] = useMutation(ADD_CHILD_COMMENT_LIKES)\r\n    const [ removeChildCommentLikes, result_removeChildCommentLikes ] = useMutation(REMOVE_CHILD_COMMENT_LIKES)\r\n    \r\n    const hideWhenVisible = { \r\n        display: 'none', \r\n        marginLeft: \"50px\" \r\n    }\r\n\r\n    const showWhenVisible = { \r\n        display: '',\r\n        marginLeft: \"50px\"\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (result_addChildCommentLikes.data) {\r\n            // console.log(result_addChildCommentLikes.data.addChildCommentLikes)\r\n            const postUpdated = postsAll.find(post => post.comments.find(comment =>\r\n                comment.id === result_addChildCommentLikes.data.addChildCommentLikes.parentComment.id\r\n            ))\r\n\r\n            setPostsAll(postsAll => postsAll.map(post => post.id === postUpdated.id\r\n                ? {\r\n                    ...post,\r\n                    comments: post.comments.map(comment => comment.id === result_addChildCommentLikes.data.addChildCommentLikes.parentComment.id\r\n                        ? {\r\n                            ...comment,\r\n                            childComments: comment.childComments.map(child => child.id === result_addChildCommentLikes.data.addChildCommentLikes.id\r\n                                ? {\r\n                                    ...child,\r\n                                    likes: result_addChildCommentLikes.data.addChildCommentLikes.likes\r\n                                }\r\n                                : child\r\n                            )\r\n                        }\r\n                        : comment\r\n                    )\r\n                }\r\n                : post\r\n            ))\r\n        }\r\n    }, [result_addChildCommentLikes.data])\r\n\r\n    useEffect(() => {\r\n        if (result_removeChildCommentLikes.data) {\r\n            // console.log(result_removeChildCommentLikes.data.removeChildCommentLikes)\r\n            const postUpdated = postsAll.find(post => post.comments.find(comment =>\r\n                comment.id === result_removeChildCommentLikes.data.removeChildCommentLikes.parentComment.id\r\n            ))\r\n\r\n            setPostsAll(postsAll => postsAll.map(post => post.id === postUpdated.id\r\n                ? {\r\n                    ...post,\r\n                    comments: post.comments.map(comment => comment.id === result_removeChildCommentLikes.data.removeChildCommentLikes.parentComment.id\r\n                        ? {\r\n                            ...comment,\r\n                            childComments: comment.childComments.map(child => child.id === result_removeChildCommentLikes.data.removeChildCommentLikes.id\r\n                                ? {\r\n                                    ...child,\r\n                                    likes: result_removeChildCommentLikes.data.removeChildCommentLikes.likes\r\n                                }\r\n                                : child\r\n                            )\r\n                        }\r\n                        : comment\r\n                    )\r\n                }\r\n                : post\r\n            ))\r\n        }\r\n    }, [result_removeChildCommentLikes.data])\r\n\r\n\r\n    const handleChildCommentLikes = (child) => {\r\n        const childComment_find = child.likes.find(user => user.id === userID)\r\n        const likes = child.likes.map(user => user.id)\r\n        if (childComment_find) {\r\n            removeChildCommentLikes({ variables: { id:child.id, likes:likes.filter(id => id !== userID) } })\r\n        } else {\r\n            addChildCommentLikes({ variables: { id:child.id, likes:likes.concat(userID) } })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={childCommentVisible[comment.id] ? showWhenVisible : hideWhenVisible}>\r\n            {/* Display Child Comment */}\r\n            {comment.childComments.map(child => \r\n                <div key={child.id} className=\"post-comment\">\r\n                    {/* Display Avatar */}\r\n                    <div>\r\n                        <Link to={`/user/${child.user.id}`}>\r\n                            <img src={child.user.avatar} alt={`avatar not display ${child.id}`} width=\"30px\" height=\"30px\" className='avatar-img-main' />\r\n                        </Link>\r\n                    </div>\r\n\r\n                    {/* Display Main section */}\r\n                    <div>\r\n                        <p>\r\n                            <b>\r\n                                {child.user.username}\r\n                                <i className=\"fas fa-arrow-right mx-3\"></i>\r\n                                {child.replyTo.username}\r\n                            </b>\r\n                        </p>\r\n                        <p className='post-content'>{child.content}</p>\r\n                        <p>{new Date(parseInt(child.updated)).toLocaleString()}</p>\r\n                    </div>\r\n\r\n                    {/* Display Reply &&& Likes */}        \r\n                    <div className='post-comment-reply-likes'>\r\n                        <button style={child.likes.find(user => user.id === userID) ? styleHeartRed : styleHeartBlack} onClick={() => handleChildCommentLikes(child)}>\r\n                            <i className=\"far fa-heart fa-1x\"></i>\r\n                            <b>{child.likes.length}</b>\r\n                        </button>\r\n                        <button style={style} onClick={() => handleReplyShow(comment.id, child.user.id)}>Reply</button>\r\n                    </div>\r\n                </div>\r\n            )} \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DisplayChildComment","import React from 'react'\r\nimport DisplayChildComment from './displayChildComment'\r\nimport { Link } from \"react-router-dom\"\r\n\r\n\r\n\r\nconst DisplayComment = ({ \r\n    post, \r\n    userID, \r\n    postsAll,\r\n    setPostsAll,\r\n    setReplyShow, \r\n    setCommentID, \r\n    setReplyUser,\r\n    setChildCommentVisible,\r\n    removeCommentLikes, \r\n    addCommentLikes, \r\n    addComment, \r\n    commentVisible, \r\n    childCommentVisible,\r\n    style, \r\n    styleHeartRed, \r\n    styleHeartBlack,\r\n    setError,\r\n    setSuccess\r\n}) => {\r\n    const handleChildCommentShow = (id) => {\r\n        if (childCommentVisible[id]) {\r\n            const newChildCommentVisible = {\r\n                ...childCommentVisible,\r\n            }\r\n            newChildCommentVisible[id] = false\r\n            setChildCommentVisible(newChildCommentVisible)\r\n        } else {\r\n            const newChildCommentVisible = {\r\n                ...childCommentVisible,\r\n            }\r\n            newChildCommentVisible[id] = true\r\n            setChildCommentVisible(newChildCommentVisible)\r\n        }\r\n    }\r\n\r\n    const handleReplyShow = (comment_id, user_id) => {\r\n        setReplyShow(true)\r\n        setCommentID(comment_id)\r\n        setReplyUser(user_id)\r\n    }\r\n\r\n    const handleCommentLikes = (comment) => {\r\n        const comment_find = comment.likes.find(user => user.id === userID)\r\n        const likes = comment.likes.map(user => user.id)\r\n        if (comment_find) {\r\n            removeCommentLikes({ variables: { id:comment.id, likes:likes.filter(id => id !== userID) } })\r\n        } else {\r\n            addCommentLikes({ variables: { id:comment.id, likes:likes.concat(userID) } })\r\n        }\r\n    }\r\n\r\n    const handleAddComment = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const content = event.target.content.value\r\n        const postID = event.target.post_id.value\r\n\r\n        try {\r\n            await addComment({ variables: { content: content, user: userID, post: postID } })\r\n            setSuccess(\"Comment Added!\")\r\n            setTimeout(() => setSuccess(null), 3000)\r\n        }catch(error) {\r\n            setError(error.message)\r\n            setTimeout(() => setError(null), 3000)\r\n        }\r\n\r\n        event.target.content.value = ''\r\n    }\r\n\r\n    const hideWhenVisible = { display: 'none'}\r\n    const showWhenVisible = { display: ''}\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/* Display Comment */}\r\n            <div style={commentVisible[post.id] ? showWhenVisible : hideWhenVisible}>\r\n                {post.comments.map(comment => \r\n                    <div key={comment.id} >\r\n                        <div className=\"post-comment\">\r\n                            {/* Display Avatar */}\r\n                            <div>\r\n                                <Link to={`/user/${comment.user.id}`}>\r\n                                    <img src={comment.user.avatar} alt={`avatar not display ${comment.id}`} width=\"30px\" height=\"30px\" className='avatar-img-main'/>\r\n                                </Link>\r\n                            </div>\r\n                            \r\n                            {/* Display Main section */}\r\n                            <div>\r\n                                <p><b>{comment.user.username}</b></p>\r\n                                <p className='post-content'>{comment.content}</p>\r\n                                <p>{new Date(parseInt(comment.updated)).toLocaleString()}</p>\r\n                \r\n                                {comment.childComments.length === 0\r\n                                    ? <div></div>\r\n                                    : <small onClick={() => handleChildCommentShow(comment.id)}> <b>Show {comment.childComments.length} comments</b> </small>\r\n                                }\r\n                            </div>\r\n                            \r\n                            {/* Display Reply &&& Likes */}\r\n                            <div className='post-comment-reply-likes'>\r\n                                <button style={comment.likes.find(user => user.id === userID) ? styleHeartRed : styleHeartBlack} onClick={() => handleCommentLikes(comment)}>\r\n                                    <i className=\"far fa-heart fa-1x\"></i>\r\n                                    <b>{comment.likes.length}</b>\r\n                                </button>\r\n                                <button style={style} onClick={() => handleReplyShow(comment.id, comment.user.id)}>Reply</button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <DisplayChildComment \r\n                            childCommentVisible={childCommentVisible}\r\n                            showWhenVisible={showWhenVisible}\r\n                            hideWhenVisible={hideWhenVisible}\r\n                            comment={comment}\r\n                            style={style}\r\n                            userID={userID}\r\n                            postsAll={postsAll}\r\n                            setPostsAll={setPostsAll}\r\n                            styleHeartRed={styleHeartRed}\r\n                            styleHeartBlack={styleHeartBlack}\r\n                            handleReplyShow={handleReplyShow}\r\n                        />\r\n                    </div>\r\n                )}\r\n            \r\n                <form className=\"comment-form m-5\" onSubmit={handleAddComment}>\r\n                    <input type='hidden' name='post_id' value={post.id} />\r\n                    <input type='text' name='content' />\r\n                    <button style={style} type='submit'>\r\n                        <i className=\"fas fa-share fa-2x\"></i>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DisplayComment","import React, { useEffect, useState } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { useMutation, useQuery, useLazyQuery } from '@apollo/client'\r\nimport Upload from './uploadPost'\r\nimport Reply from './commentReply'\r\nimport DisplayComment from './displayComment'\r\nimport { \r\n    ALL_POSTS,\r\n    ADD_POST, \r\n    ADD_POST_LIKES, \r\n    REMOVE_POST_LIKES, \r\n    ADD_COMMENT,\r\n    ADD_COMMENT_LIKES,\r\n    REMOVE_COMMENT_LIKES,\r\n    ADD_CHILD_COMMENT,\r\n    FIND_USER,\r\n    ADD_FRIEND,\r\n    REMOVE_FRIEND\r\n} from './queries'\r\n\r\n\r\n\r\nconst DisplayPost = ({\r\n    userID,\r\n    setReplyShow,\r\n    handleUploadClose,\r\n    uploadShow,\r\n    handleReplyClose,\r\n    replyShow,\r\n    error,\r\n    success,\r\n    setError,\r\n    setSuccess,\r\n}) => {\r\n    const [ userAll, setUserAll ] = useState(null)\r\n    const [ commentVisible, setCommentVisible ] = useState({})\r\n    const [ childCommentVisible, setChildCommentVisible ] = useState({})\r\n    const [ allPostsRender, setAllPostsRender ] = useState(false)\r\n    const [ comment_id, setCommentID ] = useState(null)\r\n    const [ reply_user, setReplyUser ] = useState(null)\r\n\r\n    // GraphQL\r\n    const posts = useQuery(ALL_POSTS)\r\n    const [ user, result_user ] = useLazyQuery(FIND_USER)\r\n\r\n    const [ postsAll, setPostsAll ] = useState([])\r\n    const [ addPost, result_post ] = useMutation(ADD_POST)\r\n    const [ addPostLikes, result_addPostLikes ] = useMutation(ADD_POST_LIKES)\r\n    const [ removePostLikes, result_removePostLikes ] = useMutation(REMOVE_POST_LIKES)\r\n\r\n    const [ addComment, result_comment ] = useMutation(ADD_COMMENT)\r\n    const [ addCommentLikes, result_addCommentLikes ] = useMutation(ADD_COMMENT_LIKES)\r\n    const [ removeCommentLikes, result_removeCommentLikes ] = useMutation(REMOVE_COMMENT_LIKES)\r\n\r\n    const [ addChildComment, result_childComment ] = useMutation(ADD_CHILD_COMMENT)\r\n    const [ addFriend, result_addFriend ] = useMutation(ADD_FRIEND)\r\n    const [ removeFriend, result_removeFriend ] = useMutation(REMOVE_FRIEND)\r\n\r\n\r\n    // onClick\r\n    const handlePostLikes = (post) => {\r\n        const post_find = post.likes.find(user => user.id === userID)\r\n        const likes = post.likes.map(user => user.id)\r\n        if (post_find) {\r\n            removePostLikes({ variables: { id:post.id, likes:likes.filter(id => id !== userID) } })\r\n        } else {\r\n            addPostLikes({ variables: { id:post.id, likes:likes.concat(userID) } })\r\n        }\r\n    }\r\n\r\n    const handleDisplayComment = (id) => {\r\n        if (commentVisible[id]) {\r\n            const newCommentVisible = {\r\n                ...commentVisible,\r\n            }\r\n            newCommentVisible[id] = false\r\n            setCommentVisible(newCommentVisible)\r\n        } else {\r\n            const newCommentVisible = {\r\n                ...commentVisible,\r\n            }\r\n            newCommentVisible[id] = true\r\n            setCommentVisible(newCommentVisible)\r\n        }\r\n    }\r\n\r\n    const handleFollow = (friend_id) => {\r\n        if (userAll) {\r\n            const friend_find = userAll.friends.find(friendid => friendid.id === friend_id)\r\n            const friends = userAll.friends.map(friend => friend.id)\r\n            \r\n            if (friend_find) {\r\n                removeFriend({ variables: { id: userID, friends: friends.filter(id => id !== friend_id) } })\r\n            } else {\r\n                addFriend({ variables: { id: userID, friends: friends.concat(friend_id) } })\r\n            }\r\n        }\r\n    }\r\n\r\n    //Style \r\n    const style = {\r\n        border: 'none',        \r\n        outline: \"none\",\r\n        backgroundColor: \"white\"\r\n    }\r\n\r\n    const styleFollow = {\r\n        width: \"20px\",\r\n        height: \"20px\",\r\n        color: \"white\",\r\n        backgroundColor: \"red\",\r\n        borderRadius: \"50%\",\r\n        display: \"grid\",\r\n        justifyContent: \"center\",\r\n        alignContent: \"center\",\r\n        position: \"relative\",\r\n        left: \"30%\",\r\n        bottom: \"80%\"\r\n    }\r\n\r\n    const styleFollowDisappear = {\r\n        display: \"none\",\r\n    }\r\n\r\n    const styleHeartRed = {\r\n        border: 'none',\r\n        outline: 'none',\r\n        color: \"red\",\r\n        backgroundColor: \"white\"\r\n    }\r\n\r\n    const styleHeartBlack = {\r\n        border: 'none',\r\n        outline: 'none',\r\n        color: \"black\",\r\n        backgroundColor: \"white\"\r\n    } \r\n\r\n    // useEffect\r\n    // Find User\r\n    useEffect(() => {\r\n        if (result_user.data) {\r\n            setUserAll(result_user.data.findUser)\r\n        }\r\n    }, [result_user.data])\r\n\r\n    useEffect(() => {\r\n        if (result_addFriend.data) {\r\n            // console.log(result_addFriend.data.addFriend)\r\n            setUserAll(result_addFriend.data.addFriend)\r\n        }\r\n    }, [result_addFriend.data])\r\n\r\n    useEffect(() => {\r\n        if (result_removeFriend.data) {\r\n            // console.log(result_removeFriend.data.removeFriend)\r\n            setUserAll(result_removeFriend.data.removeFriend)\r\n        }\r\n    }, [result_removeFriend.data])\r\n\r\n    // All Posts\r\n    useEffect(() => {\r\n        if (posts.data && allPostsRender === false) {\r\n            // console.log(posts.data.allPosts)\r\n            if (userID !== null) {\r\n                user({ variables: { id: userID } })\r\n            }\r\n            setPostsAll(posts.data.allPosts)\r\n            setCommentVisible(posts.data.allPosts.reduce((accumulator, currentValue) => {\r\n                accumulator[currentValue.id] = false\r\n                return accumulator\r\n            }, {}))\r\n            setChildCommentVisible(posts.data.allPosts.reduce((accumulator, currentValue) => {\r\n                currentValue.comments.map(comment => accumulator[comment.id] = false)\r\n                return accumulator\r\n            }, {}))\r\n            setAllPostsRender(true)\r\n        }\r\n    }, [posts.data])\r\n\r\n    useEffect(() => {\r\n        if (result_post.data) {\r\n            // console.log(result_post.data.addPost)\r\n            setPostsAll(postsAll => postsAll.concat(result_post.data.addPost))\r\n            let newCommentVisible = {\r\n                ...commentVisible\r\n            }\r\n            newCommentVisible[result_post.data.addPost.id] = false\r\n            setCommentVisible(newCommentVisible)\r\n        }\r\n    }, [result_post.data])\r\n\r\n    // Update Post Likes\r\n    useEffect(() => {\r\n        if (result_addPostLikes.data) {\r\n            // console.log(result_addLikes.data.addPostLikes)\r\n            setPostsAll(postsAll => postsAll.map(post => post.id === result_addPostLikes.data.addPostLikes.id \r\n                ? {\r\n                    ...post,\r\n                    likes: result_addPostLikes.data.addPostLikes.likes\r\n                }\r\n                : post ))\r\n        }\r\n    }, [result_addPostLikes.data])\r\n\r\n    useEffect(() => {\r\n        if (result_removePostLikes.data) {\r\n            // console.log(result_removeLikes.data.removePostLikes)\r\n            setPostsAll(postsAll => postsAll.map(post => post.id === result_removePostLikes.data.removePostLikes.id \r\n                ? {\r\n                    ...post,\r\n                    likes: result_removePostLikes.data.removePostLikes.likes\r\n                }\r\n                : post ))\r\n        }\r\n    }, [result_removePostLikes.data])\r\n\r\n    // Parent Comment\r\n    useEffect(() => {\r\n        if (result_comment.data) {\r\n            // console.log(result_comment.data.addComment)\r\n            setPostsAll(postsAll => postsAll.map(post => post.id === result_comment.data.addComment.post.id \r\n                ? {\r\n                    ...post,\r\n                    comments: post.comments.concat(result_comment.data.addComment)\r\n                }\r\n                : post ))\r\n\r\n            let newChildCommentVisible = {\r\n                ...childCommentVisible\r\n            }\r\n            newChildCommentVisible[result_comment.data.addComment.id] = false\r\n            setChildCommentVisible(newChildCommentVisible)  \r\n        }\r\n    }, [result_comment.data])\r\n\r\n    useEffect(() => {\r\n        if (result_addCommentLikes.data) {\r\n            // console.log(result_addCommentLikes.data.addCommentLikes)\r\n            setPostsAll(postsAll => postsAll.map(post => post.id === result_addCommentLikes.data.addCommentLikes.post.id \r\n                ? {\r\n                    ...post,\r\n                    comments: post.comments.map(comment => comment.id === result_addCommentLikes.data.addCommentLikes.id\r\n                        ? {\r\n                            ...comment,\r\n                            likes: result_addCommentLikes.data.addCommentLikes.likes\r\n                        }\r\n                        : comment\r\n                    )\r\n                }\r\n                : post ))\r\n        }\r\n    }, [result_addCommentLikes.data])\r\n\r\n    useEffect(() => {\r\n        if (result_removeCommentLikes.data) {\r\n            // console.log(result_removeCommentLikes.data.removeCommentLikes)\r\n            setPostsAll(postsAll => postsAll.map(post => post.id === result_removeCommentLikes.data.removeCommentLikes.post.id \r\n                ? {\r\n                    ...post,\r\n                    comments: post.comments.map(comment => comment.id === result_removeCommentLikes.data.removeCommentLikes.id\r\n                        ? {\r\n                            ...comment,\r\n                            likes: result_removeCommentLikes.data.removeCommentLikes.likes\r\n                        }\r\n                        : comment\r\n                    )\r\n                }\r\n                : post ))\r\n        }\r\n    }, [result_removeCommentLikes.data])\r\n\r\n    // Child Comment\r\n    useEffect(() => {\r\n        if (result_childComment.data) {\r\n            // console.log(result_childComment.data.addChildComment)\r\n            const postUpdated = postsAll.find(post => post.comments.find(comment =>\r\n                comment.id === result_childComment.data.addChildComment.parentComment.id\r\n            ))\r\n\r\n            setPostsAll(postsAll => postsAll.map(post => post.id === postUpdated.id\r\n                ? {\r\n                    ...post,\r\n                    comments: post.comments.map(comment => comment.id === result_childComment.data.addChildComment.parentComment.id\r\n                        ? {\r\n                            ...comment,\r\n                            childComments: comment.childComments.concat(result_childComment.data.addChildComment)\r\n                        }\r\n                        : comment\r\n                    )\r\n                }\r\n                : post\r\n            ))\r\n        }\r\n    }, [result_childComment.data]) \r\n\r\n\r\n    return (\r\n        <div className='content'>\r\n            {postsAll.loading\r\n                ? <div>loading...</div>\r\n                : <div>\r\n                    {postsAll.map(post => \r\n                        <div key={post.id}>\r\n                            <div className='onePost mb-5'>\r\n                                <div className=\"img-user-title-date\">\r\n                                    <Link to={`/post/${post.id}`}>\r\n                                        {post.url.split(\".\").pop() === \"mp4\"\r\n                                            ? <video controls>\r\n                                                    <source src={post.url} type=\"video/mp4\" />\r\n                                            </video>\r\n                                            : <img style={{ filter: `${post.filter}` }} className='p-3' src={post.url} alt={`not display ${post.id}`} />\r\n                                        } \r\n                                    </Link>\r\n\r\n                                    <Link to={`/user/${post.user.id}`}>\r\n                                        <h5>@ {post.user.username}</h5>\r\n                                    </Link>\r\n                                    <h5 className='post-content'>{post.title}</h5>\r\n                                    <small>{new Date(parseInt(post.updated)).toLocaleString()}</small>\r\n                                </div>\r\n                                \r\n                                <div className=\"avatar-fontawesome\">\r\n                                    <div className='avatar-img-main-position'>\r\n                                        <Link to={`/user/${post.user.id}`}>\r\n                                            <img src={post.user.avatar} alt={`avatar not display ${post.id}`} width=\"50px\" height=\"50px\" className='avatar-img-main'/>\r\n                                        </Link>\r\n                                        \r\n                                        {userAll\r\n                                            ? <span style={userAll.friends.find(friendid => friendid.id === post.user.id) ? styleFollowDisappear : styleFollow} onClick={() => handleFollow(post.user.id)}>\r\n                                                <i className=\"fas fa-plus\"></i>\r\n                                            </span>\r\n                                            : <span style={styleFollow} onClick={() => handleFollow(post.user.id)}>\r\n                                                <i className=\"fas fa-plus\"></i>\r\n                                            </span>\r\n                                        }\r\n                                    </div>\r\n\r\n                                    <button style={post.likes.find(user => user.id === userID) ? styleHeartRed : styleHeartBlack} onClick={() => handlePostLikes(post)}>\r\n                                        <i className=\"far fa-heart fa-2x\"></i>\r\n                                        <b>{post.likes.length}</b>\r\n                                    </button>\r\n\r\n                                    <button style={style} onClick={() => handleDisplayComment(post.id)}>\r\n                                        <i className=\"far fa-comment-dots fa-2x\"></i>\r\n                                        <b>{post.comments.length}</b>\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <DisplayComment \r\n                                post={post}       \r\n                                userID={userID}\r\n                                postsAll={postsAll}\r\n                                commentVisible={commentVisible}\r\n                                childCommentVisible={childCommentVisible}\r\n                                setPostsAll={setPostsAll}\r\n                                setChildCommentVisible={setChildCommentVisible}\r\n                                setReplyShow={setReplyShow}\r\n                                setCommentID={setCommentID}\r\n                                setReplyUser={setReplyUser}\r\n                                removeCommentLikes={removeCommentLikes}\r\n                                addCommentLikes={addCommentLikes}\r\n                                addComment={addComment}\r\n                                style={style}\r\n                                styleHeartRed={styleHeartRed}\r\n                                styleHeartBlack={styleHeartBlack}\r\n                                setError={setError}\r\n                                setSuccess={setSuccess}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            }\r\n\r\n            <Upload \r\n                handleClose={handleUploadClose}\r\n                show={uploadShow}\r\n                userID={userID}\r\n                addPost={addPost}\r\n                error={error}\r\n                success={success}\r\n                setError={setError}\r\n                setSuccess={setSuccess}\r\n            />  \r\n\r\n            <Reply \r\n                handleClose={handleReplyClose}\r\n                show={replyShow}\r\n                userID={userID}\r\n                addChildComment={addChildComment}\r\n                comment_id={comment_id}\r\n                reply_user={reply_user}\r\n                setError={setError}\r\n                setSuccess={setSuccess}\r\n            />   \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default DisplayPost","import React from 'react'\r\n\r\n\r\n\r\nconst Notification = ({ error, success }) => {\r\n    return (\r\n        <div>\r\n            {error\r\n                ? <div className=\"alert alert-danger\">{ error }</div>\r\n                : null\r\n            }\r\n\r\n            {success\r\n                ? <div className=\"alert alert-success\">{ success }</div>\r\n                : null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Notification","import React, { useState } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { useApolloClient } from '@apollo/client'\r\nimport DisplayPost from './displayPost'\r\nimport Notification from './notification'\r\n\r\n\r\n\r\nconst Home = ({ \r\n    token, \r\n    setToken, \r\n    userID, \r\n    username,\r\n    error,\r\n    success,\r\n    setError,\r\n    setSuccess,\r\n}) => {\r\n    // useState\r\n    const [ uploadShow, setUploadShow ] = useState(false)\r\n    const handleUploadClose = () => setUploadShow(false)\r\n    const handleUploadShow = () => setUploadShow(true)\r\n\r\n    const [ replyShow, setReplyShow ] = useState(false)\r\n    const handleReplyClose = () => {\r\n        setReplyShow(false)\r\n    }\r\n\r\n\r\n    // Logout\r\n    const client = useApolloClient()\r\n    const logout = () => {\r\n        setToken(null)\r\n        localStorage.clear()\r\n        client.resetStore()\r\n    }\r\n    \r\n\r\n    // Style\r\n    const styleBorder = {\r\n        border: 'none'\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='home'>\r\n            {/* Navbar  +++  Footer*/}\r\n            <div>\r\n                <div className='navbar'>\r\n                    <div className='nav-user'>\r\n                        {token === null\r\n                            ? <h4 className='welcome'><i>Welcome</i></h4>\r\n                            : <Link to={`/user/${userID}`}><h4><i>{username}</i></h4></Link>\r\n                        }\r\n                    </div>\r\n\r\n                    <div className='nav-post'>\r\n                        {token === null\r\n                            ? null\r\n                            : <div>\r\n                                <button style={styleBorder} onClick={handleUploadShow}>\r\n                                    <i className=\"fas fa-edit fa-2x\"></i>\r\n                                </button>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                    \r\n                    <div className='nav-login'> \r\n                        <Link to=\"/login\">\r\n                            <button style={styleBorder}>\r\n                                <i className=\"fas fa-user-plus fa-2x\"></i>\r\n                            </button>\r\n                        </Link>\r\n                    </div>\r\n\r\n                    <div className='nav-logout'> \r\n                        <button style={styleBorder} className='px-2' onClick={logout}>\r\n                            <i className=\"fas fa-sign-out-alt fa-2x\"></i>\r\n                        </button>\r\n                    </div>\r\n\r\n                    <div className='footer'>\r\n                        <p>&copy; Created by Daisy Dai</p>\r\n                        <p>Created on 12/02/2020</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n\r\n            {/* Display Post */}\r\n            <div>\r\n                <Notification error={error} success={success} />\r\n                <DisplayPost \r\n                    userID={userID}\r\n                    setReplyShow={setReplyShow}\r\n                    handleUploadClose={handleUploadClose}\r\n                    uploadShow={uploadShow}\r\n                    handleReplyClose={handleReplyClose}\r\n                    replyShow={replyShow}\r\n                    error={error}\r\n                    success={success}\r\n                    setError={setError}\r\n                    setSuccess={setSuccess}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Home","import React, { useEffect } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { gql, useMutation } from '@apollo/client'\r\nimport Notification from './notification'\r\n\r\n\r\n\r\nconst LOGIN = gql`\r\nmutation login($username: String!, $passwordHash: String!) {\r\n    login(\r\n        username: $username\r\n        passwordHash: $passwordHash\r\n    ) {\r\n        value\r\n        username\r\n        id\r\n    }\r\n}`\r\n\r\n\r\n\r\nconst Login = ({ \r\n    setToken, \r\n    setUsername, \r\n    setUserID,\r\n    error,\r\n    success,\r\n    setError,\r\n    setSuccess\r\n}) => {\r\n    const [ login, result_login ] = useMutation(LOGIN)\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const username = event.target.username.value\r\n        const passwordHash = event.target.pwd.value\r\n\r\n        try {\r\n            await login({ variables: { username, passwordHash } })\r\n            setSuccess(\"Login Successfully!\")\r\n            setTimeout(() => setSuccess(null), 3000)\r\n        } catch(error) {\r\n            setError(error.message)\r\n            setTimeout(() => setError(null), 3000)\r\n        }\r\n\r\n        event.target.username.value = ''\r\n        event.target.pwd.value = ''\r\n    }\r\n\r\n    useEffect(() => {\r\n        if ( result_login.data ) {\r\n          setToken(result_login.data.login.value)\r\n          setUsername(result_login.data.login.username)\r\n          setUserID(result_login.data.login.id)\r\n\r\n          localStorage.setItem('token', result_login.data.login.value)\r\n          localStorage.setItem('username', result_login.data.login.username)\r\n          localStorage.setItem('id', result_login.data.login.id)\r\n        }\r\n      }, [setUserID, setUsername, setToken, result_login.data])\r\n\r\n\r\n    return (\r\n        <div className='login-bigger'>\r\n            <form onSubmit={handleSubmit} className='login'>\r\n                <Notification error={error} success={success} />\r\n                <input type='text' name='username' placeholder='Username' required />\r\n                <input type='text' name='pwd' placeholder='Password' required />\r\n\r\n                <input type='submit' value='Log In' />\r\n                <small>Don't have an account yet? Please <Link to='/register'>register here.</Link></small>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Login","import React, { useState, useEffect } from 'react'\r\nimport { gql, useMutation } from '@apollo/client'\r\nimport { useHistory } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport Notification from './notification'\r\n\r\n\r\n\r\nconst CREATE_USER = gql`\r\nmutation createUser($username: String!, $avatar: String!, $passwordHash: String!) {\r\n    createUser(\r\n        username: $username\r\n        avatar: $avatar\r\n        passwordHash: $passwordHash\r\n    ) {\r\n        id\r\n    }\r\n}`\r\n\r\nconst S3_PRE_SIGN = gql`\r\nmutation s3PreSign($key: String!, $type: String!) {\r\n    s3PreSign(\r\n        key: $key\r\n        type: $type\r\n    ) {\r\n        url\r\n    }\r\n}`\r\n\r\n\r\n\r\nconst Register = ({\r\n    error,\r\n    success,\r\n    setError,\r\n    setSuccess,\r\n}) => {\r\n    const history = useHistory()\r\n    const [ createUser ] = useMutation(CREATE_USER)\r\n    const [ s3PreSign, result_url ] = useMutation(S3_PRE_SIGN)\r\n    const [ file, setFile ] = useState(null)\r\n    const [ username, setUsername ] = useState(null)\r\n    const [ passwordHash, setPasswordHash ] = useState(null)\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        setFile(event.target.avatar.files[0])\r\n        setUsername(event.target.username.value)\r\n        setPasswordHash(event.target.pwd.value)\r\n\r\n        const key = event.target.avatar.files[0].name\r\n        const type = event.target.avatar.files[0].type\r\n\r\n        try {\r\n            await s3PreSign({ variables: { key, type } })\r\n            setSuccess(\"Upload Successfully\")\r\n            setTimeout(() => setSuccess(null), 3000)\r\n        } catch(error) {\r\n            setError(\"Something wrong, please try again\")\r\n            setTimeout(() => setError(null), 3000)\r\n        }\r\n        \r\n        event.target.username.value = ''\r\n        event.target.pwd.value = ''\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (result_url.data) {\r\n            const url = result_url.data.s3PreSign.url\r\n      \r\n            axios\r\n                .put(url, file, {headers: {\r\n                    \"Content-Type\": file.type\r\n                }\r\n            })\r\n                .then(result => {\r\n                    const avatar = `https://daisy-ins.s3.amazonaws.com/${file.name}`\r\n                    async function CreateUserFunction() {\r\n                        try {\r\n                            await createUser({ variables: { username, avatar, passwordHash } })\r\n                            setSuccess(\"Please login\")\r\n                            setTimeout(() => setSuccess(null), 3000)\r\n                        } catch (error) {\r\n                            console.log(error)\r\n                            setError(error.message)\r\n                            setTimeout(() => setError(null), 3000)\r\n                        }\r\n                    }\r\n                    CreateUserFunction()\r\n                    history.push('/login')\r\n                })\r\n                .catch(error => {\r\n                    setError(error.message)\r\n                    setTimeout(() => setError(null), 3000)\r\n                })\r\n        }\r\n    }, [createUser, result_url.data])\r\n\r\n    return (\r\n        <div className='register-bigger'>\r\n        <form onSubmit={handleSubmit} className='register'>\r\n            <Notification error={error} success={success} />\r\n            <input type='text' name='username' placeholder='Username' required />\r\n            <input type='text' name='pwd' placeholder='Password' required />\r\n            <input type='file' name='avatar' required />\r\n\r\n            <input type='submit' value='Register' />\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Register","import React, { useEffect, useState } from 'react'\r\nimport { gql, useLazyQuery } from '@apollo/client'\r\nimport { useParams } from \"react-router-dom\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { useDispatch } from 'react-redux'\r\n\r\n\r\n\r\nconst FIND_USER = gql`\r\nquery findUser($id: ID) {\r\n  findUser(id: $id) {\r\n    username\r\n    avatar\r\n    id\r\n    friends {\r\n        username\r\n        avatar\r\n        id\r\n    }\r\n    posts {\r\n        filter\r\n        url\r\n        id\r\n    }\r\n  }\r\n}`\r\n\r\n\r\n\r\nconst User = () => {\r\n    const ID = useParams().id\r\n    const dispatch = useDispatch()\r\n\r\n    const [ findUser, result_user ] = useLazyQuery(FIND_USER) \r\n    const [ userInfo, setUserInfo ] = useState(null)\r\n\r\n    useEffect(() => {\r\n        if (ID !== null) {\r\n            findUser({ variables:  { id: ID } })\r\n        }\r\n    }, [ID])\r\n\r\n    useEffect(() => {\r\n        if (result_user.data) {\r\n            setUserInfo(result_user.data.findUser)\r\n            dispatch({ \r\n                type: 'SAVE_USER', \r\n                data: result_user.data.findUser \r\n            })\r\n        }\r\n    }, [result_user.data])\r\n\r\n    console.log(userInfo)\r\n    return (\r\n        <div>  \r\n            {userInfo\r\n                ? <div>\r\n                    {/* User Information */}\r\n                    <div className=\"userinfo-avatar-button p-5\">\r\n                        <img \r\n                            src={userInfo.avatar} \r\n                            alt={userInfo.id} \r\n                            width=\"100\" \r\n                            height=\"100\" \r\n                            className='avatar-img'\r\n                        />\r\n\r\n                        <Link to={`/friends/${userInfo.id}`}>\r\n                            <h4> {userInfo.friends.length} friends </h4>\r\n                        </Link>\r\n\r\n                        <h4> Hello, {userInfo.username} </h4>\r\n                    </div>\r\n                    \r\n                    {/* Display Posts */}\r\n                    <div>\r\n                        <h6 className='my-5 p-5'>{userInfo.posts.length} Post(s)</h6>\r\n\r\n                        <div className='grid-userinfo-posts'>\r\n                            {userInfo.posts.map(post =>\r\n                                <div key={post.id}>\r\n                                    <Link to={`/post/${post.id}`}>\r\n                                    {post.url.split(\".\").pop() === \"mp4\"\r\n                                        ? <video width=\"500\" height=\"300\" controls>\r\n                                            <source src={post.url} type=\"video/mp4\" />\r\n                                        </video>\r\n                                        :  <img \r\n                                            style={{ filter: `${post.filter}` }}\r\n                                            src={post.url}\r\n                                            width=\"500\" \r\n                                            height=\"300\" \r\n                                            alt={`imagenotdisplay ${post.id}`}\r\n                                        />\r\n                                    } \r\n                                    </Link>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                : <div>Loading...</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default User","import React, { useEffect } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { useMutation } from '@apollo/client'\r\nimport {\r\n    ADD_CHILD_COMMENT_LIKES,\r\n    REMOVE_CHILD_COMMENT_LIKES\r\n} from './queries'\r\n\r\n\r\n\r\nconst PostChildComment = ({ \r\n    comment, \r\n    userID,  \r\n    style, \r\n    styleHeartRed, \r\n    styleHeartBlack,\r\n    childCommentVisible,\r\n    postInfo,\r\n    setPostInfo,\r\n    handleReplyShow\r\n}) => {\r\n    // console.log(comment)\r\n    const [ addChildCommentLikes, result_addChildCommentLikes ] = useMutation(ADD_CHILD_COMMENT_LIKES)\r\n    const [ removeChildCommentLikes, result_removeChildCommentLikes ] = useMutation(REMOVE_CHILD_COMMENT_LIKES)\r\n\r\n    const hideWhenVisible = { \r\n        display: 'none', \r\n        marginLeft: \"50px\" \r\n    }\r\n\r\n    const showWhenVisible = { \r\n        display: '',\r\n        marginLeft: \"50px\"\r\n    }\r\n\r\n    const handleChildCommentLikes = (child) => {\r\n        const childComment_find = child.likes.find(user => user.id === userID)\r\n        const likes = child.likes.map(user => user.id)\r\n        if (childComment_find) {\r\n            removeChildCommentLikes({ variables: { id:child.id, likes:likes.filter(id => id !== userID) } })\r\n        } else {\r\n            addChildCommentLikes({ variables: { id:child.id, likes:likes.concat(userID) } })\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (result_addChildCommentLikes.data) {\r\n            // console.log(result_addChildCommentLikes.data.addChildCommentLikes)\r\n            const newPost = {\r\n                ...postInfo,\r\n                comments: postInfo.comments.map(comment => comment.id === result_addChildCommentLikes.data.addChildCommentLikes.parentComment.id\r\n                    ? {\r\n                        ...comment,\r\n                        childComments: comment.childComments.map(child => child.id === result_addChildCommentLikes.data.addChildCommentLikes.id\r\n                            ? {\r\n                                ...child,\r\n                                likes: result_addChildCommentLikes.data.addChildCommentLikes.likes\r\n                            }\r\n                            : child\r\n                        )\r\n                    }\r\n                    : comment\r\n                )\r\n            }\r\n            setPostInfo(newPost)\r\n        }\r\n    }, [result_addChildCommentLikes.data])\r\n\r\n    useEffect(() => {\r\n        if (result_removeChildCommentLikes.data) {\r\n            // console.log(result_removeChildCommentLikes.data.removeChildCommentLikes)\r\n            const newPost = {\r\n                ...postInfo,\r\n                comments: postInfo.comments.map(comment => comment.id === result_removeChildCommentLikes.data.removeChildCommentLikes.parentComment.id\r\n                    ? {\r\n                        ...comment,\r\n                        childComments: comment.childComments.map(child => child.id === result_removeChildCommentLikes.data.removeChildCommentLikes.id\r\n                            ? {\r\n                                ...child,\r\n                                likes: result_removeChildCommentLikes.data.removeChildCommentLikes.likes\r\n                            }\r\n                            : child\r\n                        )\r\n                    }\r\n                    : comment\r\n                )\r\n            }\r\n            setPostInfo(newPost)\r\n        }\r\n    }, [result_removeChildCommentLikes.data])\r\n\r\n    return (\r\n        <div style={childCommentVisible[comment.id] ? showWhenVisible : hideWhenVisible}>\r\n            {comment.childComments.map(child => \r\n                <div key={child.id} className='postComment'>\r\n                    {/* Display Avatar */}\r\n                    <div>\r\n                        <Link to={`/user/${child.user.id}`}>\r\n                            <img src={child.user.avatar} alt={`avatar not display ${child.id}`} width=\"30px\" height=\"30px\" className='avatar-img-main' />\r\n                        </Link>\r\n                    </div>\r\n\r\n                    {/* Display Main section */}\r\n                    <div>\r\n                        <p>\r\n                            <b>\r\n                                {child.user.username}\r\n                                <i className=\"fas fa-arrow-right mx-3\"></i>\r\n                                {child.replyTo.username}\r\n                            </b>\r\n                        </p>\r\n                        <p className='post-content'>{child.content}</p>\r\n                        <p>{new Date(parseInt(child.updated)).toLocaleString()}</p>\r\n                    </div>\r\n\r\n                    {/* Display Reply &&& Likes */}        \r\n                    <div className=\"postComment-reply-likes\">\r\n                        <button style={child.likes.find(user => user.id === userID) ? styleHeartRed : styleHeartBlack} onClick={() => handleChildCommentLikes(child)}>\r\n                            <i className=\"far fa-heart fa-1x\"></i>\r\n                            <b>{child.likes.length}</b>\r\n                        </button>\r\n                        <button style={style} onClick={() => handleReplyShow(comment.id, child.user.id)}>Reply</button>\r\n                    </div>\r\n                </div>\r\n            )} \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default PostChildComment","import React, { useEffect } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { useMutation } from '@apollo/client'\r\nimport {\r\n    ADD_COMMENT,\r\n    ADD_COMMENT_LIKES,\r\n    REMOVE_COMMENT_LIKES\r\n} from './queries'\r\nimport PostChildComment from './postChildComment'\r\n\r\n\r\n\r\nconst PostComment = ({ \r\n    postShow, \r\n    style, \r\n    postInfo,\r\n    userID,\r\n    styleHeartRed,\r\n    styleHeartBlack,\r\n    setPostInfo,\r\n    childCommentVisible,\r\n    setChildCommentVisible,\r\n    setReplyShow, \r\n    setCommentID, \r\n    setReplyUser,\r\n    setError,\r\n    setSuccess\r\n}) => {\r\n    const hideWhenVisible = { display: 'none'}\r\n    const showWhenVisible = { display: ''}\r\n\r\n    const [ addComment, result_comment ] = useMutation(ADD_COMMENT)\r\n    const [ addCommentLikes, result_addCommentLikes ] = useMutation(ADD_COMMENT_LIKES)\r\n    const [ removeCommentLikes, result_removeCommentLikes ] = useMutation(REMOVE_COMMENT_LIKES)\r\n\r\n    const handleChildCommentShow = (id) => {\r\n        if (childCommentVisible[id]) {\r\n            const newChildCommentVisible = {\r\n                ...childCommentVisible,\r\n            }\r\n            newChildCommentVisible[id] = false\r\n            setChildCommentVisible(newChildCommentVisible)\r\n        } else {\r\n            const newChildCommentVisible = {\r\n                ...childCommentVisible,\r\n            }\r\n            newChildCommentVisible[id] = true\r\n            setChildCommentVisible(newChildCommentVisible)\r\n        }\r\n    }\r\n\r\n    const handleCommentLikes = (comment) => {\r\n        const comment_find = comment.likes.find(user => user.id === userID)\r\n        const likes = comment.likes.map(user => user.id)\r\n        if (comment_find) {\r\n            removeCommentLikes({ variables: { id:comment.id, likes:likes.filter(id => id !== userID) } })\r\n        } else {\r\n            addCommentLikes({ variables: { id:comment.id, likes:likes.concat(userID) } })\r\n        }\r\n    }\r\n\r\n    const handleAddComment = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const content = event.target.content.value\r\n        const postID = event.target.post_id.value\r\n\r\n        try {\r\n            await addComment({ variables: { content: content, user: userID, post: postID } })\r\n            setSuccess(\"Comment Added!\")\r\n            setTimeout(() => setSuccess(null), 3000)\r\n        } catch (error) {\r\n            setError(error.message)\r\n            setTimeout(() => setError(null), 3000)\r\n        }\r\n        \r\n        event.target.content.value = ''\r\n    }\r\n\r\n    const handleReplyShow = (comment_id, user_id) => {\r\n        setReplyShow(true)\r\n        setCommentID(comment_id)\r\n        setReplyUser(user_id)\r\n    }\r\n\r\n\r\n    // Parent Comment\r\n    useEffect(() => {\r\n        if (result_comment.data) {\r\n            // console.log(result_comment.data.addComment)\r\n            const newPost = {\r\n                ...postInfo,\r\n                comments: postInfo.comments.concat(result_comment.data.addComment)\r\n            }\r\n            setPostInfo(newPost)\r\n        }\r\n    }, [result_comment.data])\r\n\r\n    useEffect(() => {\r\n        if (result_addCommentLikes.data) {\r\n            // console.log(result_addCommentLikes.data.addCommentLikes)\r\n            // console.log(postInfo.comments)\r\n            const newPost = {\r\n                ...postInfo,\r\n                comments: postInfo.comments.map(comment => comment.id === result_addCommentLikes.data.addCommentLikes.id\r\n                    ? {\r\n                        ...comment,\r\n                        likes: result_addCommentLikes.data.addCommentLikes.likes\r\n                    }\r\n                    : comment\r\n                )\r\n            }\r\n            setPostInfo(newPost)\r\n        }\r\n    }, [result_addCommentLikes.data])\r\n\r\n    useEffect(() => {\r\n        if (result_removeCommentLikes.data) {\r\n            // console.log(postInfo.comments)\r\n            // console.log(result_removeCommentLikes.data.removeCommentLikes)\r\n            const newPost = {\r\n                ...postInfo,\r\n                comments: postInfo.comments.map(comment => comment.id === result_removeCommentLikes.data.removeCommentLikes.id\r\n                    ? {\r\n                        ...comment,\r\n                        likes: result_removeCommentLikes.data.removeCommentLikes.likes\r\n                    }\r\n                    : comment\r\n                )\r\n            }\r\n            setPostInfo(newPost)\r\n        }\r\n    }, [result_removeCommentLikes.data])\r\n\r\n\r\n    return(\r\n        <div style={postShow ? showWhenVisible : hideWhenVisible}>\r\n            {postInfo\r\n                ? <div>\r\n                    {postInfo.comments.map(comment => \r\n                        <div key={comment.id} >\r\n                            <div className='postComment'>\r\n                                {/* Display Avatar */}\r\n                                <div>\r\n                                    <Link to={`/user/${comment.user.id}`}>\r\n                                        <img src={comment.user.avatar} alt={`avatar not display ${comment.id}`} width=\"30px\" height=\"30px\" className='avatar-img-main'/>\r\n                                    </Link>\r\n                                </div>\r\n\r\n                                {/* Display Main section */}\r\n                                <div>\r\n                                    <p><b>{comment.user.username}</b></p>\r\n                                    <p className='post-content'>{comment.content}</p>\r\n                                    <p>{new Date(parseInt(comment.updated)).toLocaleString()}</p>\r\n\r\n                                    {comment.childComments.length === 0\r\n                                        ? <div></div>\r\n                                        : <small onClick={() => handleChildCommentShow(comment.id)}> <b>Show {comment.childComments.length} comments</b> </small>\r\n                                    }\r\n                                </div>\r\n\r\n                                {/* Display Reply &&& Likes */}\r\n                                <div className=\"postComment-reply-likes\">\r\n                                    <button style={comment.likes.find(user => user.id === userID) ? styleHeartRed : styleHeartBlack} onClick={() => handleCommentLikes(comment)}>\r\n                                        <i className=\"far fa-heart fa-1x\"></i>\r\n                                        <b>{comment.likes.length}</b>\r\n                                    </button>\r\n                                    <button style={style} onClick={() => handleReplyShow(comment.id, comment.user.id)}>Reply</button>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <PostChildComment \r\n                                comment={comment} \r\n                                postInfo={postInfo}\r\n                                style={style}\r\n                                userID={userID}\r\n                                styleHeartRed={styleHeartRed}\r\n                                styleHeartBlack={styleHeartBlack}\r\n                                childCommentVisible={childCommentVisible}\r\n                                hideWhenVisible={hideWhenVisible}\r\n                                showWhenVisible={showWhenVisible} \r\n                                setPostInfo={setPostInfo}\r\n                                handleReplyShow={handleReplyShow}\r\n                            />\r\n                        </div>\r\n                    )}\r\n\r\n                    <form  className=\"comment-form m-5\" onSubmit={handleAddComment}>\r\n                        <input type='hidden' name='post_id' value={postInfo.id} />\r\n                        <input type='text' name='content' />\r\n                        <button style={style} type='submit'>\r\n                            <i className=\"fas fa-share fa-2x\"></i>\r\n                        </button>\r\n                    </form>\r\n                </div>\r\n                : <div>Loading...</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default PostComment","import React, { useEffect, useState } from 'react'\r\nimport { gql, useLazyQuery, useMutation } from '@apollo/client'\r\nimport { useParams } from \"react-router-dom\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { \r\n    ADD_POST_LIKES, \r\n    REMOVE_POST_LIKES,\r\n    ADD_CHILD_COMMENT,\r\n    FIND_USER,\r\n    ADD_FRIEND,\r\n    REMOVE_FRIEND\r\n} from './queries'\r\nimport PostComment from './postComment'\r\nimport Reply from \"./commentReply\"\r\nimport Notification from './notification'\r\n\r\n\r\n\r\nconst FIND_POST = gql`\r\nquery findPost($id: ID) {\r\n    findPost(id: $id) {\r\n        id\r\n        url\r\n        filter\r\n        title\r\n        updated\r\n        likes {\r\n            id\r\n        }\r\n        user {\r\n            id\r\n            username\r\n            avatar\r\n        }\r\n        comments {\r\n            content\r\n            updated\r\n            likes {\r\n                id\r\n            }\r\n            user {\r\n                username\r\n                avatar\r\n                id\r\n            }\r\n            post {\r\n                id\r\n            }\r\n            childComments {\r\n                content\r\n                updated\r\n                likes {\r\n                  id\r\n                }\r\n                user {\r\n                    username\r\n                    avatar\r\n                    id\r\n                }\r\n                replyTo {\r\n                    username\r\n                }\r\n                parentComment {\r\n                  id\r\n                }\r\n                id\r\n            }\r\n            id\r\n        }\r\n    }\r\n}`\r\n\r\n\r\n\r\nconst Post = ({ \r\n    userID,\r\n    error,\r\n    success,\r\n    setError,\r\n    setSuccess\r\n}) => {\r\n    // GraphQL\r\n    const [ findPost, result_post ] = useLazyQuery(FIND_POST) \r\n    const [ addPostLikes, result_addPostLikes ] = useMutation(ADD_POST_LIKES)\r\n    const [ removePostLikes, result_removePostLikes ] = useMutation(REMOVE_POST_LIKES)\r\n    const [ addChildComment, result_addChildComment ] = useMutation(ADD_CHILD_COMMENT)\r\n    const [ user, result_user ] = useLazyQuery(FIND_USER)\r\n    const [ addFriend, result_addFriend ] = useMutation(ADD_FRIEND)\r\n    const [ removeFriend, result_removeFriend ] = useMutation(REMOVE_FRIEND)\r\n\r\n    const ID = useParams().id\r\n    const [ postInfo, setPostInfo ] = useState(null)\r\n    const [ userAll, setUserAll ] = useState(null)\r\n    const [ postShow, setPostShow ] = useState(false)\r\n    const [ postRender, setPostRender ] = useState(false)\r\n    const [ childCommentVisible, setChildCommentVisible ] = useState({})\r\n    const [ replyShow, setReplyShow ] = useState(false)\r\n    const [ comment_id, setCommentID ] = useState(null)\r\n    const [ reply_user, setReplyUser ] = useState(null)\r\n\r\n    const handleReplyClose = () => setReplyShow(false)\r\n\r\n    //Style \r\n    const style = {\r\n        border: 'none',        \r\n        outline: \"none\",\r\n        backgroundColor: \"white\"\r\n    }\r\n\r\n    const styleFollow = {\r\n        width: \"20px\",\r\n        height: \"20px\",\r\n        color: \"white\",\r\n        backgroundColor: \"red\",\r\n        borderRadius: \"50%\",\r\n        display: \"grid\",\r\n        justifyContent: \"center\",\r\n        alignContent: \"center\",\r\n        position: \"relative\",\r\n        left: \"30%\",\r\n        bottom: \"80%\"\r\n    }\r\n\r\n    const styleFollowDisappear = {\r\n        display: \"none\",\r\n    }\r\n\r\n    const styleHeartRed = {\r\n        border: 'none',\r\n        outline: 'none',\r\n        color: \"red\",\r\n        backgroundColor: \"white\"\r\n    }\r\n\r\n    const styleHeartBlack = {\r\n        border: 'none',\r\n        outline: 'none',\r\n        color: \"black\",\r\n        backgroundColor: \"white\"\r\n    } \r\n\r\n\r\n    // onClick\r\n    const handlePostLikes = (post) => {\r\n        const post_find = post.likes.find(user => user.id === userID)\r\n        const likes = post.likes.map(user => user.id)\r\n        if (post_find) {\r\n            removePostLikes({ variables: { id:post.id, likes:likes.filter(id => id !== userID) } })\r\n        } else {\r\n            addPostLikes({ variables: { id:post.id, likes:likes.concat(userID) } })\r\n        }\r\n    }\r\n\r\n    const handleDisplayComment = () => {\r\n        if (postShow === false) {\r\n            setPostShow(true)\r\n        } else {\r\n            setPostShow(false)\r\n        }\r\n    }\r\n\r\n    const handleFollow = (friend_id) => {\r\n        if (userAll) {\r\n            const friend_find = userAll.friends.find(friendid => friendid.id === friend_id)\r\n            const friends = userAll.friends.map(friend => friend.id)\r\n            \r\n            if (friend_find) {\r\n                removeFriend({ variables: { id: userID, friends: friends.filter(id => id !== friend_id) } })\r\n            } else {\r\n                addFriend({ variables: { id: userID, friends: friends.concat(friend_id) } })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    // useEffect\r\n    // Find User\r\n    useEffect(() => {\r\n        if (result_user.data) {\r\n            setUserAll(result_user.data.findUser)\r\n        }\r\n    }, [result_user.data])\r\n\r\n    useEffect(() => {\r\n        if (result_addFriend.data) {\r\n            // console.log(result_addFriend.data.addFriend)\r\n            setUserAll(result_addFriend.data.addFriend)\r\n        }\r\n    }, [result_addFriend.data])\r\n\r\n    useEffect(() => {\r\n        if (result_removeFriend.data) {\r\n            // console.log(result_removeFriend.data.removeFriend)\r\n            setUserAll(result_removeFriend.data.removeFriend)\r\n        }\r\n    }, [result_removeFriend.data])\r\n    \r\n    // Find Post\r\n    useEffect(() => {\r\n        if (ID !== null) {\r\n            findPost({ variables:  { id: ID } })\r\n        }\r\n    }, [ID])\r\n\r\n    useEffect(() => {\r\n        if (result_post.data && postRender === false) {\r\n            setPostInfo(result_post.data.findPost)\r\n            setPostRender(true)\r\n            setChildCommentVisible(result_post.data.findPost.comments.reduce((accumulator, currentValue) => {\r\n                accumulator[currentValue.id] = false\r\n                return accumulator\r\n            }, {}))\r\n            user({ variables: { id: userID } })\r\n        }\r\n    }, [result_post.data])\r\n\r\n    useEffect(() => {\r\n        if (result_addPostLikes.data) {\r\n            // console.log(result_addPostLikes.data.addPostLikes.likes)\r\n            const newPost = {\r\n                ...postInfo,\r\n                likes: result_addPostLikes.data.addPostLikes.likes\r\n            }\r\n            setPostInfo(newPost)\r\n        }\r\n    }, [result_addPostLikes.data])\r\n\r\n    useEffect(() => {\r\n        if (result_removePostLikes.data) {\r\n            // console.log(result_removePostLikes.data.removePostLikes.likes)\r\n            const newPost = {\r\n                ...postInfo,\r\n                likes: result_removePostLikes.data.removePostLikes.likes\r\n            }\r\n            setPostInfo(newPost)\r\n        }\r\n    }, [result_removePostLikes.data])\r\n\r\n    // Add ChildComment\r\n    useEffect(() => {\r\n        if (result_addChildComment.data) {\r\n            // console.log(result_addChildComment.data.addChildComment)\r\n            const newPost = {\r\n                ...postInfo,\r\n                comments: postInfo.comments.map(comment => comment.id === result_addChildComment.data.addChildComment.parentComment.id\r\n                    ? {\r\n                        ...comment,\r\n                        childComments: comment.childComments.concat(result_addChildComment.data.addChildComment)\r\n                    }\r\n                    : comment\r\n                )\r\n            }\r\n            setPostInfo(newPost)\r\n        }\r\n    }, [result_addChildComment.data])\r\n\r\n    return (    \r\n        <div className='post-main-container'>\r\n            <Notification error={error} success={success} />\r\n            {postInfo\r\n                ? <div className='post-individual-page'>\r\n                    <div className='post-img'>\r\n                        {postInfo.url.split(\".\").pop() === \"mp4\"\r\n                            ? <video controls>\r\n                                    <source src={postInfo.url} type=\"video/mp4\" />\r\n                            </video>\r\n                            :  <img \r\n                                style={{ filter: `${postInfo.filter}` }}\r\n                                src={postInfo.url} \r\n                                alt={`imageNotDisplay ${postInfo.id}`} \r\n                            />\r\n                        } \r\n                        <Link to={`/user/${postInfo.user.id}`}>\r\n                            <h5>@ {postInfo.user.username}</h5>\r\n                        </Link>\r\n                        <h5 className=\"post-content\">{postInfo.title}</h5>\r\n                        <small>{new Date(parseInt(postInfo.updated)).toLocaleString()}</small>\r\n                    </div>\r\n                    \r\n                    <div className='post-avatar-button mt-3'>\r\n                        <div className='avatar-img-main-position'>\r\n                            <Link to={`/user/${postInfo.user.id}`}>\r\n                                <img \r\n                                    src={postInfo.user.avatar} \r\n                                    alt={`imageNotDisplay ${postInfo.id}`} \r\n                                    width=\"50\" \r\n                                    height=\"50\" \r\n                                    className='avatar-img-main'\r\n                                />\r\n                            </Link>\r\n\r\n                            {userAll\r\n                                ? <span style={userAll.friends.find(friendid => friendid.id === postInfo.user.id) ? styleFollowDisappear : styleFollow} onClick={() => handleFollow(postInfo.user.id)}>\r\n                                    <i className=\"fas fa-plus\"></i>\r\n                                </span>\r\n                                : <span style={styleFollow} onClick={() => handleFollow(postInfo.user.id)}>\r\n                                    <i className=\"fas fa-plus\"></i>\r\n                                </span>\r\n                            }\r\n                        </div>\r\n                        \r\n                        <button style={postInfo.likes.find(user => user.id === userID) ? styleHeartRed : styleHeartBlack} onClick={() => handlePostLikes(postInfo)}>\r\n                            <i className=\"far fa-heart fa-2x\"></i>\r\n                            <b>{postInfo.likes.length}</b>\r\n                        </button>\r\n\r\n                        <button style={style} onClick={handleDisplayComment}>\r\n                            <i className=\"far fa-comment-dots fa-2x\"></i>\r\n                            <b>{postInfo.comments.length}</b>\r\n                        </button>\r\n                    </div>\r\n\r\n                    <PostComment \r\n                        postShow={postShow} \r\n                        style={style}\r\n                        postInfo={postInfo}\r\n                        userID={userID}\r\n                        styleHeartRed={styleHeartRed}\r\n                        styleHeartBlack={styleHeartBlack}\r\n                        childCommentVisible={childCommentVisible}\r\n                        setPostInfo={setPostInfo}\r\n                        setChildCommentVisible={setChildCommentVisible}\r\n                        setReplyShow={setReplyShow}\r\n                        setCommentID={setCommentID}\r\n                        setReplyUser={setReplyUser}\r\n                        error={error}\r\n                        success={success}\r\n                        setError={setError}\r\n                        setSuccess={setSuccess}\r\n                    />\r\n                </div>\r\n                : <div>Loading...</div>\r\n            }\r\n\r\n            <Reply \r\n                userID={userID}\r\n                show={replyShow}\r\n                comment_id={comment_id}\r\n                reply_user={reply_user}\r\n                handleClose={handleReplyClose}\r\n                addChildComment={addChildComment}\r\n                setReplyShow={setReplyShow} \r\n                setCommentID={setCommentID}\r\n                setReplyUser={setReplyUser}\r\n                setError={setError}\r\n                setSuccess={setSuccess}\r\n            />   \r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Post","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport { gql, useMutation, useSubscription } from '@apollo/client'\r\nimport Notification from './notification'\r\n\r\n\r\n\r\nconst POST_MESSAGE = gql`\r\nmutation postMessage($username: String, $content: String!, $channel_name: String!, $created_at: String) {\r\n    postMessage(\r\n        username: $username,\r\n        content: $content,\r\n        channel_name: $channel_name,\r\n        created_at: $created_at\r\n    ) {\r\n        id\r\n        username\r\n        content\r\n        channel_name\r\n        created_at\r\n    }\r\n}`\r\n\r\nconst POST_MESSAGE_SUB = gql`\r\nsubscription postMessage($channel_name: String!) {\r\n    postMessage(\r\n        channel_name: $channel_name\r\n    ) {\r\n        id\r\n        username\r\n        content\r\n        channel_name\r\n        created_at\r\n    }\r\n}\r\n`\r\n\r\n\r\n\r\nconst Friends = ({ error, success, setError, setSuccess }) => {\r\n    const user = useSelector(state => state.user)\r\n    const [ channelSent, SetChannelSent ] = useState(null)\r\n    const [ channelReceived, setChannelReceived ] = useState(null)\r\n    const [ chatHistory, setChatHistory ] = useState([])\r\n\r\n    const [ postMessage ] = useMutation(POST_MESSAGE)\r\n\r\n    useSubscription(POST_MESSAGE_SUB, {\r\n        variables: { channel_name:channelReceived },\r\n        onSubscriptionData: ({ subscriptionData }) => {\r\n            console.log(subscriptionData.data.postMessage.username)\r\n            setChatHistory(chatHistory.concat(subscriptionData.data.postMessage))\r\n            if (channelSent !== subscriptionData.data.postMessage.username) {\r\n                setSuccess(`You received message from ${subscriptionData.data.postMessage.username}`)\r\n                setTimeout(() => setSuccess(null), 3000)\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const username = channelReceived\r\n        const content = event.target.chat.value\r\n        const channel_name = channelSent\r\n        const created_at = new Date()\r\n\r\n        try {\r\n            await postMessage({ variables: { username, content, channel_name, created_at } })\r\n        } catch (error) {\r\n            setError(error.message)\r\n            setTimeout(() => setError(null), 3000)\r\n        }\r\n        \r\n        setChatHistory(chatHistory.concat({ username, content, channel_name, created_at }))\r\n\r\n        event.target.chat.value= ''\r\n    }\r\n\r\n\r\n    const handleChannelName = (friendname) => {\r\n        SetChannelSent(friendname)\r\n        setChatHistory([])\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (user) {\r\n            setChannelReceived(user.username)\r\n        }\r\n    }, [user])\r\n\r\n    console.log(channelSent, channelReceived)\r\n    console.log(chatHistory)\r\n    console.log(user)\r\n    // Channel Name: Username\r\n    return (\r\n        <div className=\"container\">\r\n            {user === null\r\n                ? <Link to=\"/\">Go back Home</Link>\r\n                : <div id=\"friends-grid\">\r\n                    <div>\r\n                        <h3> Friend Lists </h3>\r\n\r\n                        <ul className='navbar-ul mt-5'>\r\n                            {user.friends.map(friend => \r\n                                <button key={friend.id} onClick={() => handleChannelName(friend.username)}>\r\n                                    <li>\r\n                                        <img \r\n                                            src={user.avatar} \r\n                                            alt={user.id} \r\n                                            width=\"50\" \r\n                                            height=\"50\" \r\n                                            className='avatar-img-main mr-2'\r\n                                        />\r\n\r\n                                        {friend.username}\r\n                                    </li>\r\n                                </button>\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <Notification \r\n                            error={error}\r\n                            success={success}\r\n                        />\r\n\r\n                        <div className='chatRoom'>\r\n                            {chatHistory.filter(chatMes => chatMes.username === channelSent || chatMes.channel_name === channelSent).map((chatMes, index)=> \r\n                                <div key={index} className='chat-total'>\r\n                                    {chatMes.username === user.username\r\n                                        ? <ul className=\"chat-left\">\r\n                                            <li className='chat-li-left'> \r\n                                                <p className='chat-me'> Me </p> \r\n                                                <p className='text-left'>{chatMes.content}</p>\r\n                                            </li>\r\n                                        </ul>\r\n                                        :  <ul className=\"chat-right\">\r\n                                            <li className='chat-li-right'> \r\n                                                <p className='text-right'>{chatMes.content}</p>\r\n                                                <p className='chat-mate'> {chatMes.username} </p> \r\n                                            </li>\r\n                                        </ul>\r\n                                    }\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n\r\n                        <form onSubmit={handleSubmit} id=\"chat-form\">\r\n                            <input type=\"text\" name='chat' />\r\n                            <button type='submit'> Enter </button>\r\n                        </form>\r\n                    </div>\r\n                </div> \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Friends","const userReducer = (state = null, action) => {\r\n    switch (action.type) {\r\n        case \"SAVE_USER\":\r\n            state = action.data\r\n            return state\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default userReducer","// Dependencies\nimport React, { useState } from 'react'\nimport ReactDOM from 'react-dom'\nimport {\n  BrowserRouter as Router,\n  Switch, Route, Redirect\n} from \"react-router-dom\"\nimport { Provider } from 'react-redux'\nimport { createStore, combineReducers } from 'redux'\nimport { \n  ApolloClient, \n  ApolloProvider, \n  HttpLink, \n  InMemoryCache,\n  split\n} from '@apollo/client'\nimport { setContext } from 'apollo-link-context'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { WebSocketLink } from '@apollo/client/link/ws'\n\n// Static\nimport './decorator/styles.css'\n\n// React.js\nimport Home from './components/home'\nimport Login from './components/login'\nimport Register from './components/register'\nimport User from './components/user'\nimport Post from './components/post'\nimport Friends from './components/friends'\nimport userReducer from './components/userinfo'\n\n\n\nconst reducer = combineReducers({\n  user: userReducer\n})\n\nconst store = createStore(reducer)\n\n\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('phonenumbers-user-token')\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `bearer ${token}` : null,\n    }\n  }\n})\n\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000/graphql',\n})\n\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/graphql-ws`,\n  options: {\n    reconnect: true\n  }\n})\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query)\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    )\n  },\n  wsLink,\n  authLink.concat(httpLink),\n)\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache({\n    typePolicies: {\n      Post: {\n        fields: {\n          likes: {\n            merge(existing, incoming) {\n              return incoming\n            },\n          },\n        },\n      },\n      Comment: {\n        fields: {\n          likes: {\n            merge(existing, incoming) {\n              return incoming\n            },\n          },\n        },\n      },\n      ChildComment: {\n        fields: {\n          likes: {\n            merge(existing, incoming) {\n              return incoming\n            },\n          },\n        },\n      },\n      User: {\n        fields: {\n          friends: {\n            merge(existing, incoming) {\n              return incoming\n            },\n          },\n        },\n      },\n  }}),\n  link: splitLink\n})\n\n\n\nconst App = () => {\n  const [ token, setToken ] = useState(localStorage.getItem('token'))\n  const [ username, setUsername ] = useState(localStorage.getItem('username'))\n  const [ userID, setUserID ] = useState(localStorage.getItem('id'))\n\n  const [ error, setError ] = useState(null)\n  const [ success, setSuccess ] = useState(null)\n  \n  return (\n    <div>\n      <Router>\n        <Switch>\n          <Route exact path=\"/post/:id\">\n            <Post \n              userID={userID} \n              error={error}\n              success={success}\n              setError={setError}\n              setSuccess={setSuccess}\n            />\n          </Route>\n\n          <Route exact path=\"/user/:id\">\n            <User />\n          </Route>\n\n          <Route exact path=\"/friends/:id\">\n            <Friends \n              error={error}\n              success={success}\n              setError={setError}\n              setSuccess={setSuccess}\n            />\n          </Route>\n          \n          <Route exact path=\"/register\">\n            <Register \n              error={error}\n              success={success}\n              setError={setError}\n              setSuccess={setSuccess}\n            />\n          </Route>\n\n          <Route exact path=\"/login\">\n            {token !== null\n              ? <Redirect to='/' />\n              : <Login \n                  setToken={setToken} \n                  setUsername={setUsername}\n                  setUserID={setUserID}\n                  error={error}\n                  success={success}\n                  setError={setError}\n                  setSuccess={setSuccess}\n                />\n            }\n          </Route>\n\n          <Route exact path=\"/\">\n            <Home \n              setToken={setToken} \n              token={token}\n              userID={userID}\n              username={username}\n              error={error}\n              success={success}\n              setError={setError}\n              setSuccess={setSuccess}\n            />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <Provider store={store}>\n      <App /> \n    </Provider>,\n  </ApolloProvider>, document.getElementById('root'))"],"sourceRoot":""}